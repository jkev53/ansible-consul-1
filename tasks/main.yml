---
# File: main.yml - Main tasks for Consul

- name: Install python dependencies
  when:
    - consul_install_dependencies | bool
  block:
    - name: Install netaddr dependency on controlling host (with --user)
      pip:
        name: netaddr
        extra_args: --user
      delegate_to: 127.0.0.1
      become: false
      run_once: true
      when: is_virtualenv is not defined

    - name: Install netaddr dependency on controlling host (virtualenv)
      pip:
        name: netaddr
      delegate_to: 127.0.0.1
      become: false
      run_once: true
      when: is_virtualenv is defined

- name: Include checks/asserts
  import_tasks: asserts.yml

- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags: always


# Gathers facts (bind address) from servers not currently targeted.
# 'delegate_facts' is currently rather buggy in Ansible so this might not
# always work. Hence 'consul_gather_server_facts' defaults to 'no'.
- name: Gather facts from other servers
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ consul_servers | difference(play_hosts) }}"
  ignore_errors: yes
  when: consul_gather_server_facts | bool

- name: Expose advertise_address(_wan) datacenter and node_role as facts
  set_fact:
    consul_advertise_address_wan: "{{ consul_advertise_address_wan }}"
    consul_advertise_address: "{{ consul_advertise_address }}"
    consul_bind_address: "{{ consul_bind_address }}"
    consul_datacenter: "{{ consul_datacenter }}"
    consul_node_role: "{{ consul_node_role }}"

- name: Read bootstrapped state
  stat:
    path: "{{ consul_bootstrap_state }}"
  register: bootstrap_state
  ignore_errors: true
  tags: always

- name: Include user and group settings
  import_tasks: user_group.yml

- name: Include directory settings
  import_tasks: dirs.yml

- name: Include bashrc mods
  import_tasks: bashrc.yml

- name: Check for existing Consul binary
  stat:
    path: "{{ consul_binary }}"
  register: consul_binary_installed

- name: Calculate whether to install consul binary
  set_fact:
    consul_install_binary: "{{ consul_install_upgrade or not consul_binary_installed.stat.exists }}"

- name: Install OS packages and consul - locally
  include_tasks: install.yml
  when:
    - consul_install_binary | bool
    - not consul_install_remotely | bool

- name: Install OS packages and consul - remotely
  include_tasks: install_remote.yml
  when:
    - consul_install_binary | bool
    - consul_install_remotely | bool

- block:
    - block:
        - name: Check for gossip encryption key on previously boostrapped server
          slurp:
            src: "{{ consul_config_path }}/config.json"
          register: consul_config_b64
          ignore_errors: yes

        - name: Deserialize existing configuration
          set_fact:
            consul_config: "{{ consul_config_b64.content | b64decode | from_json }}"
          when: consul_config_b64.content is defined

        - name: Save gossip encryption key from existing configuration
          set_fact:
            consul_raw_key: "{{ consul_config.encrypt }}"
          when: consul_config is defined

      no_log: true
      when:
        - consul_raw_key is not defined
        - bootstrap_state.stat.exists | bool
        - inventory_hostname in consul_servers

    # Key provided by extra vars or the above block
    - name: Write gossip encryption key locally for use with new servers
      copy:
        content: "{{ consul_raw_key }}"
        dest: '/tmp/consul_raw.key'
      become: no
      no_log: true
      run_once: true
      register: consul_local_key
      delegate_to: localhost
      changed_when: false
      when: consul_raw_key is defined

    # Generate new key if none was found
    - block:
        - name: Generate gossip encryption key
          shell: "PATH={{ consul_bin_path }}:$PATH consul keygen"
          register: consul_keygen

        - name: Write key locally to share with other nodes
          copy:
            content: "{{ consul_keygen.stdout }}"
            dest: '/tmp/consul_raw.key'
          become: no
          delegate_to: localhost

      no_log: true
      run_once: true
      when:
        - not consul_local_key.changed
        - not bootstrap_state.stat.exists | bool

    - name: Read gossip encryption key for servers that require it
      set_fact:
        consul_raw_key: "{{ lookup('file', '/tmp/consul_raw.key') }}"
      no_log: true
      when:
        - consul_raw_key is not defined

    - name: Delete gossip encryption key file
      file:
        path: '/tmp/consul_raw.key'
        state: absent
      become: no
      run_once: true
      delegate_to: localhost
      changed_when: false
  no_log: true
  when:
    - consul_encrypt_enable

- name: Create Consul configuration
  import_tasks: config.yml

- name: Create ACL configuration
  include_tasks: acl.yml
  when: consul_acl_enable | bool

- name: Create TLS configuration
  include_tasks: tls.yml
  when: consul_tls_enable | bool

- name: Create rsyslogd configuration
  import_tasks: syslog.yml

- name: Create Debian init script
  template:
    src: consul_debianinit.j2
    dest: /etc/init.d/consul
    owner: root
    group: root
    mode: 0755

- name: Create systemd script
  template:
    src: consul_systemd.service.j2
    dest: /lib/systemd/system/consul.service
    owner: root
    group: root
    mode: 0644
  register: systemd_unit
  notify: restart consul on linux

- name: Reload systemd
  systemd:
    daemon_reload: yes
  when: systemd_unit is changed

- block:

  - name: Start Consul
    service:
      name: consul
      state: started
      enabled: yes
  
  - name: Check Consul HTTP API (via TCP socket)
    wait_for:
      delay: 15
      port: "{{ consul_ports.http|int }}"
      host: "{{ consul_addresses.http }}"
    when: (consul_ports.http|int > -1) and (consul_addresses.http|ipaddr)

  - name: Check Consul HTTP API (via unix socket)
    wait_for:
      delay: 15
      path: "{{ consul_addresses.http | replace('unix://', '', 1) }}"
    when: consul_addresses.http is match("unix://*")

  - name: Create bootstrapped state file
    file:
      dest: "{{ consul_bootstrap_state }}"
      state: touch

  - include_tasks: ../tasks/dnsmasq.yml
    when: consul_dnsmasq_enable | bool

  - include_tasks: ../tasks/iptables.yml
    when: consul_iptables_enable | bool

  when: not bootstrap_state.stat.exists
